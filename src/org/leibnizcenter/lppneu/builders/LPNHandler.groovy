package org.leibnizcenter.lppneu.builders

import commons.base.Formula
import groovy.util.logging.Log4j
import org.leibnizcenter.lppneu.components.language.*
import org.leibnizcenter.lppneu.components.lppetrinets.LPNet
import org.leibnizcenter.lppneu.components.lppetrinets.LPPlace
import org.leibnizcenter.lppneu.components.lppetrinets.LPTransition
import org.leibnizcenter.lppneu.components.mapper.Mapper
import org.leibnizcenter.lppneu.components.position.AbstractTriple
import org.leibnizcenter.lppneu.components.position.FactualTriple
import org.leibnizcenter.pneu.components.petrinet.*

@Log4j
class LPNHandler {

    LPPNProgram program, reducedProgram

    Net net, tripleAnchoredNet, transitionAnchoredNet, simplifiedNet, unifiedNet

    static void batchExport(Net net, String filename) {
        net.exportToLog(filename)
        net.exportToDot(filename)
    }

    static private void logPreConversion(String typeConversion, Net net, Net convertedNet) {
        batchExport(net, typeConversion+".source.pre")
        batchExport(convertedNet, typeConversion+".clone.pre")
    }

    static private void logPostConversion(String typeConversion, Net net, Net convertedNet) {
        batchExport(net, typeConversion+".source.post")
        batchExport(convertedNet, typeConversion+".clone.post")
    }

    // map function
    Mapper mapper = new Mapper()

    // triple anchoring
    // for all places, it looks for other places of their propositional triple and relates them
    Net tripleAnchoringNet(Net net) {

        if (mapper.expressionPlaceMap == null) throw new RuntimeException("The net should be mapped before.")

        mapper.expressionTripleMap = [:]

        Net tripleAnchoredNet = net.minimalClone()

        logPreConversion("tripleAnchoring", net, tripleAnchoredNet)

        // for each place, construct the associated triple if necessary
        for (expression in mapper.expressionPlaceMap.keySet()) {
            Expression refExpression = expression.positive()

            log.trace("Source expression: " + expression)
            log.trace("Reference expression for triple: " + refExpression)

            if (mapper.expressionTripleMap[refExpression] == null) {
                mapper.expressionTripleMap[refExpression] = FactualTriple.build(refExpression)
            }
        }

        // for each triple reconstructed create a subNet
        for (coupling in mapper.expressionTripleMap) {
            tripleAnchoredNet.include(buildTripleNet(coupling.key))
        }

        logPostConversion("tripleAnchoring", net, tripleAnchoredNet)

        tripleAnchoredNet
    }

    // transition anchoring
    // for all places, it attaches the input transitions to a transition with the generating operation

    Net transitionAnchoringNet(Net net) {

        if (mapper.expressionPlaceMap == null) throw new RuntimeException("The net should be mapped before.")

        if (mapper.expressionTripleMap == null) { mapper.expressionTripleMap = [:] }

        Net transitionAnchoredNet = net.minimalClone()

        logPreConversion("transitionAnchoring", net, transitionAnchoredNet)

        for (expression in mapper.expressionPlaceMap.keySet()) {
            log.trace("Checking the places with expression: "+expression)
            Expression refExpression = expression.positive()

            if (mapper.expressionTripleMap[refExpression] == null) {
                mapper.expressionTripleMap[refExpression] = FactualTriple.build(refExpression)
            }

            AbstractTriple triple = mapper.expressionTripleMap[refExpression]

            // all positive places are generated by positive transitions
            if (expression.isPositive()) {
                log.trace("The expression is positive")
                log.trace("Number of places to be accounted: "+ mapper.expressionPlaceMap[expression].size())
                for (place in mapper.expressionPlaceMap[expression]) {
                    log.trace("Number of inputs to the place ${place}: "+ place.inputs.size())
                    for (input in place.inputs) {
                        LPTransition tInput = (LPTransition) (input.source)
                        if (tInput.operation) {
                            triple.posOperationList << tInput.operation
                        } else {
                            triple.posTransitionList << tInput
                        }
                    }
                }
            } else if (expression.isNegative()) {
                log.trace("The expression is negative")
                log.trace("Number of places to be accounted: "+ mapper.expressionPlaceMap[expression].size())
                for (place in mapper.expressionPlaceMap[expression]) {
                    log.trace("Number of inputs to the place ${place}: "+ place.inputs.size())
                    for (input in place.inputs) {
                        LPTransition tInput = (LPTransition) (input.source)
                        if (tInput.operation) {
                            triple.negOperationList << tInput.operation
                        } else {
                            triple.negTransitionList << tInput
                        }
                    }
                }
            }

        }

        // for each operator of the triple, create a link from the associated transition
        for (coupling in mapper.expressionTripleMap) {

            AbstractTriple triple = mapper.expressionTripleMap[coupling.key]

            // if at least a trnasition is attached you have to create it, as it is useful for the triple
            if (triple.posTransitionList.size() > 0 || triple.negTransitionList.size() > 0) {

                Net subNet = new LPNet(function: new LPPlace(expression: Expression.build(coupling.key, Operator.ASSOCIATION)))

                LPTransition tNexus
                LPPlace pNexus

                if (triple.posTransitionList.size() > 0) {

                    tNexus = new LPTransition(operation: triple.positive.toOperation())
                    pNexus = new LPPlace(link: true)

                    subNet.transitionList << tNexus
                    subNet.placeList << pNexus
                    subNet.arcList << Arc.buildArc((Place) pNexus, (Transition) tNexus, ArcType.LINK)

                    for (int i = 0; i < triple.posTransitionList.size(); i++) {
                        LPTransition tOperator = (LPTransition) triple.posTransitionList[i]
                        subNet.arcList << Arc.buildArc((Transition) tOperator, (Place) pNexus, ArcType.LINK)
                    }

                }

                if (triple.negTransitionList.size() > 0) {

                    tNexus = new LPTransition(operation: triple.negative.toOperation())
                    pNexus = new LPPlace(link: true)

                    subNet.transitionList << tNexus
                    subNet.placeList << pNexus
                    subNet.arcList << Arc.buildArc((Place) pNexus, (Transition) tNexus, ArcType.LINK)

                    for (int i = 0; i < triple.negTransitionList.size(); i++) {
                        LPTransition tOperator = (LPTransition) triple.negTransitionList[i]
                        subNet.arcList << Arc.buildArc((Transition) tOperator, (Place) pNexus, ArcType.LINK)
                    }
                }

                transitionAnchoredNet.include(subNet)
            }
        }

        logPostConversion("transitionAnchoring", net, transitionAnchoredNet)

        transitionAnchoredNet
    }

    // simplification looks for cloned subnets
    // once they are identified, it replaces them, i.e
    // it replaces the cloned subnets with a root subnet
    // overwriting the associated inputs/outputs
    // it also remap all internal arcs

    static Net simplifyNet(Net net) {

        Net simplifiedNet = net.minimalClone()

        logPreConversion("simplification", net, simplifiedNet)

        List<Net> netList = simplifiedNet.getAllNets()

        Map<Net, List<Net>> clonesNetMap = [:]
        List<Net> alreadyAccounted = []

        for (int i = netList.size() - 1; i > 0; i--) {
            Net ni = netList[i]
            if (!alreadyAccounted.contains(ni)) {
                for (int j = i - 1; j >= 0; j--) {
                    Net nj = netList[j]
                    if (!alreadyAccounted.contains(nj)) {
                        if (Net.compare(ni, nj)) {
                            if (!clonesNetMap[ni]) clonesNetMap[ni] = []
                            clonesNetMap[ni] << nj
                            alreadyAccounted << nj // take out a net which has already been associated
                        }
                    }
                }
                alreadyAccounted << ni // take out a net which has already been associated
            }
        }

        log.trace("Clones Map: "+clonesNetMap)

        if (clonesNetMap.size() == 0) {
            return net
        } else {
            for (coupling in clonesNetMap) {
                log.trace("OUTER cycle: root net: " + coupling.key)
                log.trace("I have to aggregate " + coupling.value.size() + " cloned nets on the previous net")

                // take the root
                Net rootNet = coupling.key

                // for each cloned net
                for (cloneNet in coupling.value) {
                    log.trace("INNER cycle: clone net: " + cloneNet)
                    // log.trace("clone net detail: " + cloneNet.toLog())

                    // change the link from the parents
                    for (parent in cloneNet.parents) {
                        log.trace("change the link from the parent to the clone to the root instead...")
                        log.trace("parent net: " + parent)
                        // log.trace("parent net detail: " + parent.toLog())

                        log.trace("parent subnet before modification: " + parent.subNets)

                        parent.subNets -= [cloneNet]
                        log.trace("parent subnet (after removal clone net (${cloneNet}): " + parent.subNets)
                        // TOCHECK: possible problems of recursions
                        // when they have different levels
                        parent.include(rootNet)
                        log.trace("parent subnet (after addition root net  (${rootNet})): " + parent.subNets)

                        // for each of its arcs
                        for (arc in parent.arcList) {
                            log.trace("arc of the parent: " + arc)
                            Integer pos

                            pos = cloneNet.placeList.findIndexOf { it == arc.source }
                            if (pos >= 0) {
                                Arc newArc = new Arc(source: rootNet.placeList[pos], target: arc.target, weight: arc.weight)
                                parent.arcList -= [arc]
                                parent.arcList += [newArc]
                                log.trace("modifying arc to: " + newArc)
                            }

                            pos = cloneNet.placeList.findIndexOf { it == arc.target }
                            if (pos >= 0) {
                                Arc newArc = new Arc(source: arc.source, target: rootNet.placeList[pos], weight: arc.weight)
                                parent.arcList -= [arc]
                                parent.arcList += [newArc]
                                log.trace("modifying arc to: " + newArc)
                            }

                            pos = cloneNet.transitionList.findIndexOf { it == arc.source }
                            if (pos >= 0) {
                                Arc newArc = new Arc(source: rootNet.transitionList[pos], target: arc.target, weight: arc.weight)
                                parent.arcList -= [arc]
                                parent.arcList += [newArc]
                                log.trace("modifying arc to: " + newArc)
                            }

                            pos = cloneNet.transitionList.findIndexOf { it == arc.target }
                            if (pos >= 0) {
                                Arc newArc = new Arc(source: arc.source, target: rootNet.transitionList[pos], weight: arc.weight)
                                parent.arcList.remove(arc)
                                parent.arcList.add(newArc)
                                log.trace("modifying arc to: " + newArc)
                            }
                        }

                    }

                    // for each input node
                    // (the indexing correspond to that of the root net)
                    for (int i = 0; i < cloneNet.inputs.size(); i++) {
                        Node rootNode = rootNet.inputs[i]
                        Node clonedNode = cloneNet.inputs[i]

                        log.trace("clone node: " + clonedNode)

                        // for each of its input arcs
                        for (arc in clonedNode.inputs) {
                            log.trace("arc input to cloned node: " + arc)

                            if (arc.source == null || arc.target == null)
                                throw new RuntimeException("Arc cannot be null")

                            // if the arc goes externally
                            if (!cloneNet.arcList.contains(arc.source)) {
                                log.trace("the arc comes from externally")

                                // attach the arc to the root node
                                Arc newArc = new Arc(source: arc.source, target: rootNode, weight: arc.weight)
                                log.trace("change arc output " + arc)
                                if (arc.source.class == rootNode.class) throw new RuntimeException("You cannot link two nodes of the same type.")

                                // bind the arc to the rootNet
                                rootNode.inputs << newArc
                                log.trace("add arc to rootNode" + rootNode.inputs)
                            }
                        }
                    }

                    // the same, for the output nodes
                    for (int i = 0; i < cloneNet.outputs.size(); i++) {
                        Node rootNode = rootNet.outputs[i]
                        Node clonedNode = cloneNet.outputs[i]
                        for (arc in clonedNode.outputs) {
                            if (arc.source == null || arc.target == null)
                                throw new RuntimeException("Arc cannot be null")

                            if (!cloneNet.arcList.contains(arc.target)) {
                                Arc newArc = new Arc(source: rootNode, target: arc.target, weight: arc.weight)
                                if (arc.target.class == rootNode.class)
                                    throw new RuntimeException("You cannot link two nodes of the same type.")
                                rootNode.outputs << newArc
                            }
                        }

                    }
                }
            }

        }

        logPostConversion("simplification", net, simplifiedNet)

        simplifiedNet
    }

    // unification looks for all places with the same expression
    // and all transitions with the same operation and attach them using nexus nodes

    Net unifyNet(Net net) {

        if (mapper.expressionPlaceMap == null) throw new RuntimeException("The net should be mapped before.")

        Net unifiedNet = net.minimalClone()

        logPreConversion("unification", net, unifiedNet)

        for (coupling in mapper.expressionPlaceMap) {
            if (coupling.value.size() > 1) {
                LPPlace pNexus = new LPPlace(expression: coupling.key)
                unifiedNet.placeList << pNexus
                LPTransition tNexus = new LPTransition(link: true)
                unifiedNet.transitionList << tNexus
                unifiedNet.arcList << Arc.buildArc((Place) pNexus, (Transition) tNexus, ArcType.LINK)

                for (p in coupling.value) {
                    unifiedNet.arcList << Arc.buildArc((Transition) tNexus, (Place) p, ArcType.LINK)
                }
            }
        }

        for (coupling in mapper.operationTransitionMap) {
            if (coupling.value.size() > 1) {
                LPTransition tNexus = new LPTransition(operation: coupling.key)
                unifiedNet.transitionList << tNexus
                LPPlace pNexus = new LPPlace(link: true)  // this is a synchornization place
                unifiedNet.placeList << pNexus
                unifiedNet.arcList << Arc.buildArc((Transition) tNexus, (Place) pNexus, ArcType.LINK)

                for (t in coupling.value) {
                    unifiedNet.arcList << Arc.buildArc((Place) pNexus, (Transition) t, ArcType.LINK)
                }
            }
        }

        logPostConversion("unification", net, unifiedNet)

        unifiedNet
    }

    void convert(LPPNProgram source, Boolean withTriples = false) {

        // save the original program
        program = source

        if (program.parsingErrors.size() > 0) {
            throw new RuntimeException("parsing errors:\n"+program.parsingErrors.join("\n"))
        }

        // reduce it, decomposing compound formulas
        reducedProgram = program.reduce()

        // transform the program to a net
        net = LPPN2LPN.buildProgramNet(reducedProgram)

        // map the net, i.e. map places and transitions to expressions and operations
        mapper.mapNet(net)

        // create the subnets for the triples
        tripleAnchoredNet = tripleAnchoringNet(net)

        // anchor the transitions to the operations on triples
        if (withTriples) simplifiedNet = simplifyNet(tripleAnchoredNet) // put triples on the net
        else simplifiedNet = simplifyNet(net)                           // leave triples out of the net

        // TODO: optimization, rather then remapping, remove from the general map while simplifying
        // remap the net with the accounted reductions
        mapper.mapNet(simplifiedNet)

        // simplify the net, i.e. replicated cloned subnets with a similar one
        transitionAnchoredNet = transitionAnchoringNet(simplifiedNet)

        // TODO: optimization, rather then remapping, add to the general map while anchoring
        // remap the net now with the new transitions and places due to the anchoring
        mapper.mapNet(transitionAnchoredNet)

        // unify the net, i.e. connect places and transitions with the same labels
        unifiedNet = unifyNet(transitionAnchoredNet)

    }

}
