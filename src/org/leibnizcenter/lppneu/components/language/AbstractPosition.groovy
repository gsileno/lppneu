package org.leibnizcenter.lppneu.components.language

import groovy.transform.EqualsAndHashCode
import groovy.util.logging.Log4j

@Log4j @EqualsAndHashCode
abstract class AbstractPosition {

    AbstractPosition parent

    Boolean instantiated

    AbstractPositionRef ref

    String print() {
        String output = ""

        if (!ref) return "still to be defined"+"\n"
        output += ref.toString()+"\n"
        if (parent) output += "generated by "+parent.ref+"\n"
        if (instantiated) output += "instantiated"+"\n"
        else output += "not instantiated"+"\n"

        output
    }

    AbstractPosition negate() {
        AbstractPosition negated = this.clone()
        negated.ref.label = negated.ref.label.negate()
        negated
    }

    AbstractPosition nullify() {
        AbstractPosition nullified = this.clone()
        nullified.ref.label = nullified.ref.label.nullify()
        nullified
    }

    AbstractPosition positive() {
        AbstractPosition positive = this.clone()
        positive.ref.label = positive.ref.label.positive()
        positive
    }

    AbstractPosition negative() {
        AbstractPosition negative = this.clone()
        negative.ref.label = negative.ref.label.negative()
        negative
    }

}
